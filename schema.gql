scalar Date

type Mutation {
  createRoom(name: String!): Room!
  sendUserOffer(offer: OfferInput!, roomUuid: String!, userUuid: String!): Boolean!

  """Mutation to trigger subscription serverStatus !"""
  testSubscription: Boolean! @deprecated(reason: "Use only for testing")
}

type Offer {
  sdp: String
  type: RTCSdpType!
}

input OfferInput {
  sdp: String
  type: RTCSdpType!
}

type ParticiantAction {
  action: Offer!
  participant: Participant!
}

type Participant {
  uuid: String!
}

type Query {
  isAlive: Boolean!
  joinRoom(roomUuid: String!, userUuid: String!): Boolean
  ping: String!
}

enum RTCSdpType {
  answer
  offer
  pranswer
  rollback
}

type Room {
  uuid: String!
}

type Subscription {
  """
  Subscription to server status, trigger using mutation `testSubscription` 
  """
  serverStatus: Float! @deprecated(reason: "Use only for testing")
  subscribeToAnswers(
    """User uuid"""
    uuid: String!
  ): ParticiantAction!
  subscribeToOffers(
    """Room uuid"""
    roomUuid: String!

    """User uuid"""
    userUuid: String!
  ): Offer!
  subscribeToParticipants(roomUuid: String!): Participant!
}